datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  books        Book[]
  clippings    Clipping[]
  reflections  Reflection[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hasSetEncryptionPassword Boolean @default(false)
  encryptionSalt            String?
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Book {
  id        String     @id @default(cuid())
  title     String
  titleIv   String
  author    String?
  authorIv  String
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  clippings Clipping[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, title])
}

model Clipping {
  id        String       @id @default(cuid())
  bookId    String
  book      Book         @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  highlight String
  location  String?
  addedAt   DateTime
  reflections Reflection[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  iv        String

  @@index([bookId])
  @@index([userId])
}

model Reflection {
  id         String    @id @default(cuid())
  clippingId String
  clipping   Clipping  @relation(fields: [clippingId], references: [id], onDelete: Cascade)
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  text       String
  iv         String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([clippingId])
  @@index([userId])
}